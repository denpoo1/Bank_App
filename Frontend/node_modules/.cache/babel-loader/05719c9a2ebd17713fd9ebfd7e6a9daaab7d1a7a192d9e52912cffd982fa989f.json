{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0418\\u043B\\u044C\\u044F\\\\Desktop\\\\Bank_App\\\\Frontend\\\\src\\\\MarketButtons\\\\MarketButtons.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Wrap from \"../Wrap/Wrap\";\nimport styles from './MarketButtons.module.css';\nimport deposit from '../images/MarketButtons/deposit.png';\nimport Modal from '../Modal/Module'; // Импортируем компонент модального окна\nimport axios from 'axios';\nimport Cookies from \"js-cookie\";\nimport visa from '../images/card/visa.png';\nimport { useSpring, animated } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarketButtons = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [id, setId] = useState(null);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [isCardListOpen, setIsCardListOpen] = useState(false);\n  const [cardNumber, setCardNumber] = useState('');\n  const [isCardNumberValid, setIsCardNumberValid] = useState(true);\n  const [amount, setAmount] = useState('');\n  const [isAmountValid, setIsAmountValid] = useState(true);\n  const [error, setError] = useState(null); // State variable to store error message\n  const isFormValid = isCardNumberValid && isAmountValid && amount.trim() !== '' && cardNumber.trim() !== ''; // Check if amount is not empty\n\n  const handleAmountChange = e => {\n    const input = e.target.value.replace(/[^\\d,]/g, ''); // Remove non-digit and non-comma characters\n    setAmount(input);\n    setIsAmountValid(/^\\d{0,5}(,\\d{0,2})?$/.test(input)); // Check if amount is valid\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent form submission if it's not valid\n\n    if (isFormValid) {\n      const token = Cookies.get('token');\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n      try {\n        // Request to get all credit card numbers\n        const creditCardsResponse = await axios.get('http://localhost:8080/credit-cards', {\n          headers\n        });\n        const creditCardNumbers = creditCardsResponse.data.map(creditCard => creditCard.cardNumber);\n\n        // Convert entered card number to an integer\n        const enteredCardNumber = parseInt(cardNumber.replace(/\\D/g, ''), 10);\n\n        // Check if the entered card number exists in the list of all credit card numbers\n        if (creditCardNumbers.includes(enteredCardNumber)) {\n          // Find the from_account_id (id of the selectedCard)\n          const from_card_id = selectedCard.id;\n\n          // Find the to_account_id using the entered card number\n          const matchingCard = creditCardsResponse.data.find(creditCard => creditCard.cardNumber === enteredCardNumber);\n          const to_card_id = matchingCard.id;\n\n          // Convert the amount to cents if it's in dollars\n\n          // Send the payment request\n          const paymentData = {\n            from_card_id,\n            to_card_id,\n            amount: amount\n          };\n          console.log(amount);\n          const paymentResponse = await axios.post('http://localhost:8080/payments', paymentData, {\n            headers\n          });\n          setError(null);\n          console.log('Payment successful:', paymentResponse.data);\n\n          // Reload the page after successful payment\n          window.location.reload();\n        } else {\n          setError('Entered card number does not exist.');\n        }\n      } catch (error) {\n        console.error('Error processing payment:', error);\n      }\n    }\n  };\n  const handleCardNumberChange = e => {\n    const input = e.target.value.replace(/\\D/g, ''); // Remove non-digit characters\n    let formattedInput = '';\n    for (let i = 0; i < input.length; i += 4) {\n      formattedInput += input.slice(i, i + 4) + ' ';\n    }\n    setCardNumber(formattedInput.trim());\n    setIsCardNumberValid(input.length === 16); // Check if card number is valid\n  };\n\n  const marketButtons = [{\n    img: deposit,\n    text: \"Deposit\"\n  }, {\n    img: deposit,\n    text: \"Send\"\n  }, {\n    img: deposit,\n    text: \"Statisticks\"\n  }, {\n    img: deposit,\n    text: \"Transaction\"\n  }, {\n    img: deposit,\n    text: \"Piggy\"\n  }, {\n    img: deposit,\n    text: \"Piggy\"\n  }, {\n    img: deposit,\n    text: \"Piggy\"\n  }];\n  const [isDepositModalOpen, setIsDepositModalOpen] = useState(false);\n  const [isPiggyBankOpen, setIsPiggyBankOpen] = useState(false);\n  const handleDepositClick = e => {\n    e.preventDefault();\n    const firstCard = cards[0]; // Получаем первую карту из массива\n    setSelectedCard(firstCard); // Устанавливаем её как выбранную карту\n    setIsCardListOpen(false); // Закрываем список карт\n    setIsDepositModalOpen(true); // Открываем модальное окно\n  };\n\n  const handlePiggyBank = e => {\n    e.preventDefault();\n    setIsPiggyBankOpen(true); // Открываем модальное окно\n  };\n\n  const handleCloseDepositModal = () => {\n    if (!isCardListOpen) {\n      setIsDepositModalOpen(false);\n    }\n  };\n  const handleCardSelect = card => {\n    setSelectedCard(card);\n    setIsCardListOpen(false);\n  };\n  const handleCloseCardList = () => {\n    setIsCardListOpen(false);\n  };\n  useEffect(() => {\n    const token = Cookies.get('token');\n    const username = Cookies.get('username');\n    const headers = {\n      Authorization: `Bearer ${token}`\n    };\n    axios.get('http://localhost:8080/customers', {\n      headers\n    }).then(res => {\n      const matchingUser = res.data.find(arr => arr.username === username);\n      if (matchingUser) {\n        setId(matchingUser.id);\n      }\n    }).catch(error => {\n      console.error('Error fetching customer data', error);\n    });\n    if (id != null) {\n      axios.get(`http://localhost:8080/customers/${id}/credit-cards\n            `, {\n        headers\n      }).then(res => {\n        setCards(res.data);\n      });\n    }\n  }, [id]);\n  const formatBalance = balance => {\n    const formattedBalance = balance.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n    return formattedBalance;\n  };\n  const modalAnimation = useSpring({\n    from: {\n      opacity: 0,\n      transform: 'translateY(50px) scale(0.1)' // Начальное положение и размер\n    },\n\n    to: {\n      opacity: 1,\n      transform: 'translateY(0) scale(1)' // Конечное положение и размер\n    }\n  });\n\n  return /*#__PURE__*/_jsxDEV(Wrap, {\n    className: `${styles.marketButtonsWrapper} `,\n    children: [\"Markets\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buttonsWrapper,\n      children: marketButtons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.wrapForMarketElement,\n        onClick: button.text === \"Deposit\" ? handleDepositClick : button.text === \"piggy bank\" ? handlePiggyBank : undefined,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: button.img,\n          alt: \"qwe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: button.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), isDepositModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      className: isCardListOpen ? `${styles.qwe}` : '',\n      onClose: handleCloseDepositModal,\n      children: /*#__PURE__*/_jsxDEV(animated.form, {\n        className: styles.depForm,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.withdrawWrapper,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: styles.withdrawTitle,\n            children: \"Withdraw money from:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.cardWrapper,\n            onClick: () => setIsCardListOpen(!isCardListOpen),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.cardImage,\n              children: [selectedCard && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"** \", selectedCard.cardNumber.toString().slice(-4)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"visa\",\n                src: visa\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.cardNameAndWrapper,\n              children: [selectedCard && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: selectedCard.billingAddress\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 41\n              }, this), selectedCard && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [formatBalance(selectedCard.balance), \" \\u20AC\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 29\n          }, this), isCardListOpen && /*#__PURE__*/_jsxDEV(animated.div, {\n            className: `${styles.cardList} \n                                    ${styles.backdrop}`,\n            style: modalAnimation,\n            children: /*#__PURE__*/_jsxDEV(animated.div, {\n              style: modalAnimation,\n              className: styles.cardList,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.cardListElementWrapper,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.cardTitleAndCloseButton,\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Withdraw from:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `${styles.closeButton}}`,\n                    onClick: handleCloseCardList,\n                    children: \"\\u2716\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 45\n                }, this), cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.cardListItem,\n                  onClick: () => handleCardSelect(card) // Выбор карты и закрытие списка\n                  ,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: styles.cardImage,\n                    children: [selectedCard && /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [\"** \", card.cardNumber.toString().slice(-4)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 255,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                      alt: \"visa\",\n                      src: visa\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 257,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 253,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: styles.cardNameAndWrapper,\n                    children: [selectedCard && /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: card.billingAddress\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 261,\n                      columnNumber: 61\n                    }, this), selectedCard && /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [formatBalance(card.balance), \" \\u20AC\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 264,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 53\n                  }, this)]\n                }, card.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 49\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.withdrawWrapper} ${isCardNumberValid ? '' : styles.error}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: styles.withdrawTitle,\n            children: \"Send money to:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.inputForCardNumber,\n            type: \"text\",\n            value: cardNumber,\n            onChange: handleCardNumberChange,\n            placeholder: \"0000 0000 0000 0000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 29\n          }, this), !isCardNumberValid && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.errorText,\n            children: \"Card number must have exactly 16 digits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 52\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.amountWrapper} ${isAmountValid ? '' : styles.error}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: styles.amountTitle,\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.inputForAmount,\n            type: \"text\",\n            value: amount,\n            onChange: handleAmountChange,\n            placeholder: \"00,00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 29\n          }, this), !isAmountValid && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.errorText,\n            children: \"Invalid amount format\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${styles.formButton} ${isFormValid ? styles.formButtonActive : ''}`,\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 25\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `${styles.errorText} ${styles.errorMessage}`,\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }, this), isPiggyBankOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      className: isCardListOpen ? `${styles.qwe}` : '',\n      onClose: handleCloseDepositModal,\n      children: /*#__PURE__*/_jsxDEV(animated.form, {\n        className: styles.depForm,\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n};\n_s(MarketButtons, \"uZHxzNzEa/CHRi/hmD3q2IPyttw=\", false, function () {\n  return [useSpring];\n});\n_c = MarketButtons;\nexport default MarketButtons;\nvar _c;\n$RefreshReg$(_c, \"MarketButtons\");","map":{"version":3,"names":["React","useState","useEffect","Wrap","styles","deposit","Modal","axios","Cookies","visa","useSpring","animated","jsxDEV","_jsxDEV","MarketButtons","_s","cards","setCards","id","setId","selectedCard","setSelectedCard","isCardListOpen","setIsCardListOpen","cardNumber","setCardNumber","isCardNumberValid","setIsCardNumberValid","amount","setAmount","isAmountValid","setIsAmountValid","error","setError","isFormValid","trim","handleAmountChange","e","input","target","value","replace","test","handleSubmit","preventDefault","token","get","headers","Authorization","creditCardsResponse","creditCardNumbers","data","map","creditCard","enteredCardNumber","parseInt","includes","from_card_id","matchingCard","find","to_card_id","paymentData","console","log","paymentResponse","post","window","location","reload","handleCardNumberChange","formattedInput","i","length","slice","marketButtons","img","text","isDepositModalOpen","setIsDepositModalOpen","isPiggyBankOpen","setIsPiggyBankOpen","handleDepositClick","firstCard","handlePiggyBank","handleCloseDepositModal","handleCardSelect","card","handleCloseCardList","username","then","res","matchingUser","arr","catch","formatBalance","balance","formattedBalance","toString","modalAnimation","from","opacity","transform","to","className","marketButtonsWrapper","children","buttonsWrapper","button","index","wrapForMarketElement","onClick","undefined","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","qwe","onClose","form","depForm","onSubmit","withdrawWrapper","withdrawTitle","cardWrapper","cardImage","cardNameAndWrapper","billingAddress","div","cardList","backdrop","style","cardListElementWrapper","cardTitleAndCloseButton","closeButton","cardListItem","inputForCardNumber","type","onChange","placeholder","errorText","amountWrapper","amountTitle","inputForAmount","formButton","formButtonActive","errorMessage","_c","$RefreshReg$"],"sources":["C:/Users/Илья/Desktop/Bank_App/Frontend/src/MarketButtons/MarketButtons.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Wrap from \"../Wrap/Wrap\";\r\nimport styles from './MarketButtons.module.css';\r\nimport deposit from '../images/MarketButtons/deposit.png';\r\nimport Modal from '../Modal/Module'; // Импортируем компонент модального окна\r\nimport axios from 'axios';\r\nimport Cookies from \"js-cookie\";\r\nimport visa from '../images/card/visa.png';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\n\r\n\r\nconst MarketButtons = () => {\r\n    const [cards, setCards] = useState([])\r\n    const [id, setId] = useState(null)\r\n    const [selectedCard, setSelectedCard] = useState(null);\r\n    const [isCardListOpen, setIsCardListOpen] = useState(false);\r\n    const [cardNumber, setCardNumber] = useState('');\r\n    const [isCardNumberValid, setIsCardNumberValid] = useState(true);\r\n    const [amount, setAmount] = useState('');\r\n    const [isAmountValid, setIsAmountValid] = useState(true);\r\n    const [error, setError] = useState(null); // State variable to store error message\r\n    const isFormValid = isCardNumberValid && isAmountValid && amount.trim() !== '' && cardNumber.trim() !== ''; // Check if amount is not empty\r\n\r\n\r\n    const handleAmountChange = (e) => {\r\n        const input = e.target.value.replace(/[^\\d,]/g, ''); // Remove non-digit and non-comma characters\r\n        setAmount(input);\r\n        setIsAmountValid(/^\\d{0,5}(,\\d{0,2})?$/.test(input)); // Check if amount is valid\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); // Prevent form submission if it's not valid\r\n\r\n        if (isFormValid) {\r\n            const token = Cookies.get('token');\r\n            const headers = {\r\n                Authorization: `Bearer ${token}`\r\n            };\r\n\r\n            try {\r\n                // Request to get all credit card numbers\r\n                const creditCardsResponse = await axios.get('http://localhost:8080/credit-cards', { headers });\r\n                const creditCardNumbers = creditCardsResponse.data.map(creditCard => creditCard.cardNumber);\r\n\r\n                // Convert entered card number to an integer\r\n                const enteredCardNumber = parseInt(cardNumber.replace(/\\D/g, ''), 10);\r\n\r\n                // Check if the entered card number exists in the list of all credit card numbers\r\n                if (creditCardNumbers.includes(enteredCardNumber)) {\r\n                    // Find the from_account_id (id of the selectedCard)\r\n                    const from_card_id = selectedCard.id;\r\n\r\n                    // Find the to_account_id using the entered card number\r\n                    const matchingCard = creditCardsResponse.data.find(creditCard => creditCard.cardNumber === enteredCardNumber);\r\n                    const to_card_id = matchingCard.id;\r\n\r\n                    // Convert the amount to cents if it's in dollars\r\n\r\n                    // Send the payment request\r\n                    const paymentData = {\r\n                        from_card_id,\r\n                        to_card_id,\r\n                        amount: amount\r\n                    };\r\n                    console.log(amount)\r\n                    const paymentResponse = await axios.post('http://localhost:8080/payments', paymentData, { headers });\r\n                    setError(null);\r\n                    console.log('Payment successful:', paymentResponse.data);\r\n\r\n                    // Reload the page after successful payment\r\n                    window.location.reload();\r\n                } else {\r\n                    setError('Entered card number does not exist.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error processing payment:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const handleCardNumberChange = (e) => {\r\n        const input = e.target.value.replace(/\\D/g, ''); // Remove non-digit characters\r\n        let formattedInput = '';\r\n\r\n        for (let i = 0; i < input.length; i += 4) {\r\n            formattedInput += input.slice(i, i + 4) + ' ';\r\n        }\r\n\r\n        setCardNumber(formattedInput.trim());\r\n        setIsCardNumberValid(input.length === 16); // Check if card number is valid\r\n    };\r\n\r\n\r\n\r\n    const marketButtons = [\r\n        { img: deposit, text: \"Deposit\" },\r\n        { img: deposit, text: \"Send\" },\r\n        { img: deposit, text: \"Statisticks\" },\r\n        { img: deposit, text: \"Transaction\" },\r\n        { img: deposit, text: \"Piggy\" },\r\n        { img: deposit, text: \"Piggy\" },\r\n        { img: deposit, text: \"Piggy\" },\r\n    ];\r\n\r\n    const [isDepositModalOpen, setIsDepositModalOpen] = useState(false);\r\n    const [isPiggyBankOpen, setIsPiggyBankOpen] = useState(false);\r\n\r\n    const handleDepositClick = (e) => {\r\n        e.preventDefault();\r\n        const firstCard = cards[0]; // Получаем первую карту из массива\r\n        setSelectedCard(firstCard); // Устанавливаем её как выбранную карту\r\n        setIsCardListOpen(false); // Закрываем список карт\r\n        setIsDepositModalOpen(true); // Открываем модальное окно\r\n    };\r\n\r\n    const handlePiggyBank = (e) => {\r\n        e.preventDefault();\r\n        setIsPiggyBankOpen(true); // Открываем модальное окно\r\n    };\r\n\r\n    const handleCloseDepositModal = () => {\r\n        if (!isCardListOpen) {\r\n            setIsDepositModalOpen(false);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const handleCardSelect = (card) => {\r\n        setSelectedCard(card);\r\n        setIsCardListOpen(false);\r\n    };\r\n\r\n    const handleCloseCardList = () => {\r\n        setIsCardListOpen(false);\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const token = Cookies.get('token')\r\n        const username = Cookies.get('username')\r\n        const headers = {\r\n            Authorization: `Bearer ${token}`\r\n        };\r\n        axios.get('http://localhost:8080/customers', { headers }).then((res) => {\r\n            const matchingUser = res.data.find(arr => arr.username === username)\r\n            if (matchingUser) {\r\n                setId(matchingUser.id)\r\n            }\r\n        }).catch(error => {\r\n            console.error('Error fetching customer data', error);\r\n        });\r\n\r\n\r\n        if (id != null) {\r\n            axios.get(`http://localhost:8080/customers/${id}/credit-cards\r\n            `, { headers }).then((res) => {\r\n                setCards(res.data)\r\n\r\n\r\n            })\r\n        }\r\n    }, [id])\r\n\r\n\r\n    const formatBalance = (balance) => {\r\n        const formattedBalance = balance.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\r\n        return formattedBalance;\r\n    }\r\n\r\n\r\n    const modalAnimation = useSpring({\r\n        from: {\r\n            opacity: 0,\r\n            transform: 'translateY(50px) scale(0.1)', // Начальное положение и размер\r\n        },\r\n        to: {\r\n            opacity: 1,\r\n            transform: 'translateY(0) scale(1)', // Конечное положение и размер\r\n        },\r\n    });\r\n    return (\r\n\r\n        <Wrap className={`${styles.marketButtonsWrapper} `}>\r\n            Markets\r\n            <div className={styles.buttonsWrapper}>\r\n                {marketButtons.map((button, index) => (\r\n                    <button\r\n                        key={index}\r\n                        className={styles.wrapForMarketElement}\r\n                        onClick={button.text === \"Deposit\" ? handleDepositClick : (button.text === \"piggy bank\" ? handlePiggyBank : undefined)}\r\n                        >\r\n                        <img src={button.img} alt='qwe'></img>\r\n                        <span>{button.text}</span>\r\n                    </button>\r\n                ))}\r\n            </div>\r\n            {isDepositModalOpen && (\r\n                <Modal className={isCardListOpen ? `${styles.qwe}` : ''} onClose={handleCloseDepositModal}>\r\n\r\n                    <animated.form className={styles.depForm} onSubmit={handleSubmit}>\r\n                        <h1>Transfer</h1>\r\n                        <div className={styles.withdrawWrapper}>\r\n                            <h2 className={styles.withdrawTitle}>Withdraw money from:</h2>\r\n                            <div\r\n                                className={styles.cardWrapper}\r\n                                onClick={() => setIsCardListOpen(!isCardListOpen)}\r\n                            >\r\n                                <div className={styles.cardImage}>\r\n                                    {selectedCard && (\r\n                                        <span>** {selectedCard.cardNumber.toString().slice(-4)}</span>\r\n                                    )}\r\n                                    <img alt=\"visa\" src={visa} />\r\n                                </div>\r\n                                <div className={styles.cardNameAndWrapper}>\r\n                                    {selectedCard && (\r\n                                        <span>{selectedCard.billingAddress}</span>\r\n                                    )}\r\n                                    {selectedCard && (\r\n                                        <span>{formatBalance(selectedCard.balance)} €</span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {isCardListOpen && (\r\n                                <animated.div\r\n                                    className={`${styles.cardList} \r\n                                    ${styles.backdrop}`}\r\n                                    style={modalAnimation}\r\n                                >\r\n                                    <animated.div style={modalAnimation} className={styles.cardList}>\r\n                                        {/* Вывести список всех карт для выбора */}\r\n                                        <div className={styles.cardListElementWrapper}>\r\n                                            <div className={styles.cardTitleAndCloseButton}>\r\n                                                <span>Withdraw from:</span>\r\n                                                <span\r\n                                                    className={`${styles.closeButton}}`}\r\n                                                    onClick={handleCloseCardList}\r\n                                                >\r\n                                                    &#10006;\r\n                                                </span>\r\n                                            </div>\r\n                                            {cards.map((card) => (\r\n                                                <div\r\n                                                    key={card.id}\r\n                                                    className={styles.cardListItem}\r\n                                                    onClick={() => handleCardSelect(card)} // Выбор карты и закрытие списка\r\n                                                >\r\n                                                    <div className={styles.cardImage}>\r\n                                                        {selectedCard && (\r\n                                                            <span>** {card.cardNumber.toString().slice(-4)}</span>\r\n                                                        )}\r\n                                                        <img alt=\"visa\" src={visa} />\r\n                                                    </div>\r\n                                                    <div className={styles.cardNameAndWrapper}>\r\n                                                        {selectedCard && (\r\n                                                            <span>{card.billingAddress}</span>\r\n                                                        )}\r\n                                                        {selectedCard && (\r\n                                                            <span>{formatBalance(card.balance)} €</span>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </div>\r\n                                            ))}\r\n                                        </div>\r\n                                    </animated.div>\r\n                                </animated.div>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className={`${styles.withdrawWrapper} ${isCardNumberValid ? '' : styles.error}`}>\r\n                            <h2 className={styles.withdrawTitle}>Send money to:</h2>\r\n                            <input\r\n                                className={styles.inputForCardNumber}\r\n                                type=\"text\"\r\n                                value={cardNumber}\r\n                                onChange={handleCardNumberChange}\r\n                                placeholder=\"0000 0000 0000 0000\"\r\n                            />\r\n                            {!isCardNumberValid && <p className={styles.errorText}>Card number must have exactly 16 digits</p>}\r\n                        </div>\r\n                        <div className={`${styles.amountWrapper} ${isAmountValid ? '' : styles.error}`}>\r\n                            <h2 className={styles.amountTitle}>Amount</h2>\r\n                            <input\r\n                                className={styles.inputForAmount}\r\n                                type=\"text\"\r\n                                value={amount}\r\n                                onChange={handleAmountChange}\r\n                                placeholder=\"00,00\"\r\n                            />\r\n                            {!isAmountValid && <p className={styles.errorText}>Invalid amount format</p>}\r\n                        </div>\r\n\r\n                        <button className={`${styles.formButton} ${isFormValid ? styles.formButtonActive : ''}`} type=\"submit\">\r\n                            Submit\r\n                        </button>\r\n                        {error && (\r\n                            <p className={`${styles.errorText} ${styles.errorMessage}`}>\r\n                                {error}\r\n                            </p>\r\n                        )}\r\n                    </animated.form>\r\n\r\n                </Modal>\r\n            )}\r\n            {isPiggyBankOpen && (\r\n                <Modal className={isCardListOpen ? `${styles.qwe}` : ''} onClose={handleCloseDepositModal}>\r\n\r\n                    <animated.form className={styles.depForm} onSubmit={handleSubmit}>\r\n                        <h1>Transfer</h1>\r\n                        \r\n                    </animated.form>\r\n\r\n                </Modal>\r\n            )}\r\n        </Wrap>\r\n    );\r\n};\r\n\r\nexport default MarketButtons;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}